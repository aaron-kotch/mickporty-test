{"version":3,"sources":["components/Common/PageLayout/PageLayout.jsx","components/Common/Header/index.js","components/Common/BackButton/index.js","components/Common/RefreshContent/CustomRefreshContent.jsx","Pages/FavouriteAddresses/FavouriteAddresses.jsx"],"names":["useStyles","makeStyles","theme","root","paddingTop","overflow","backgroundColor","height","rootHome","paddingRight","paddingLeft","bottomNavigatorSpacer","container","PageLayout","className","containerFullHeigth","header","body","footer","PageName","classes","usePageContext","saveScrollPosition","getScrollPosition","containerRef","useRef","useEffect","savedPos","current","scrollTo","listenToScroll","e","scrollTop","setTimeout","addEventListener","node","removeEventListener","clsx","ref","id","CustomRefreshContent","topCoordinate","style","position","left","top","borderRadius","width","CircularProgress","size","color","card","padding","item","display","borderBottom","palette","grey","paddingBottom","marginBottom","cursor","icon","flex","details","fontSize","itemHeader","fontWeight","typography","platformFontWeight","textTransform","address","whiteSpace","textOverflow","addAddressBtn","marginTop","FavouriteAddresses","history","useHistory","user","useUserContext","useAddressContext","addresses","getFavAddr","generateValuesForAddAddr","addAddress","pushAlertPopUp","useAlertContext","useState","showAddAddressModal","setShowAddAddressModal","addingAddress","setAddingAddress","refreshData","setRefreshData","token","onNewAddressAdded","addr","a","values","addUserFavAddressList","then","res","objWithIdFromBackend","customerFavouriteAddressId","message","catch","err","Header","leftSlot","BackButton","centerSlot","PageHeader","pullDownThreshold","onRefresh","Promise","resolve","triggerHeight","startInvisible","length","Card","map","onClick","push","pathname","routes","editAddress","replace","title","address2","Button","variant","fullWidth","OverlayAddressSelector","onBackButtonClicked","onUseAddressClicked"],"mappings":"+OAOMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,WAAY,SACZC,SAAS,OACTC,gBAAiB,QACjBC,OAAQ,QAQVC,SAAU,CACRJ,WAAY,SACZK,aAAc,IACdC,YAAa,IACbL,SAAS,OACTC,gBAAiB,QACjBC,OAAQ,QAEVI,sBAAuB,CAErBJ,OAAQ,+BAEVK,UAAW,CACTL,OAAQ,YAINM,EAAa,SAAC,GAAwE,IAAtEC,EAAqE,EAArEA,UAAWC,EAA0D,EAA1DA,oBAAqBC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SACpEC,EAAUpB,IAChB,EAAkDqB,cAA1CC,EAAR,EAAQA,mBAAoBC,EAA5B,EAA4BA,kBACtBC,EAAeC,iBAAO,MAmC5B,OA3BAC,qBAAU,WACR,GAAGP,EAAS,CACV,IAAMQ,EAAWJ,EAAkBJ,GAInCK,EAAaI,QAAQC,SAAS,EAAGF,GAEjC,IAAMG,EAAiB,SAACC,GACtB,IAAQC,EAAcR,EAAaI,QAA3BI,UAGRV,EAAmBU,EAAWb,IAEhCc,YAAW,WAENT,EAAaI,SAChBJ,EAAaI,QAAQM,iBAAiB,SAAUJ,KAC/C,GACH,IAAMK,EAAOX,EAAaI,QAC1B,OAAO,WACLO,EAAKC,oBAAoB,SAAUN,OAIvC,IAEK,eAAC,IAAD,CAAWhB,UAAwB,SAAbK,EAAsBkB,YAAKjB,EAAQZ,SAAU,CAACM,IAAcuB,YAAKjB,EAAQjB,KAAM,CAACW,IAAawB,IAAKd,EAAce,GAAG,wBAAzI,UACJvB,EACD,qBAAKF,UAAWuB,YAAK,eAAEjB,EAAQR,UAAWG,IAA1C,SACGE,IAEH,qBAAKH,UAAWM,EAAQF,OAAxB,WAEIA,GAAU,qCACV,qBAAKJ,UAAWM,EAAQT,wBACxB,wBACCO,Y,iCCrFT,kD,iCCAA,kD,4FCIMsB,EAAuB,SAAC,GAA0B,IAAD,IAAxBC,qBAAwB,MAAV,KAAU,EACnD,OACE,qBAAKC,MAAO,CAACC,SAAU,WAAYC,KAAM,MAAOC,IAAKJ,EAAenC,gBAAiB,QAASwC,aAAc,MAAOC,MAAO,OAAQxC,OAAQ,QAA1I,SACI,cAACyC,EAAA,EAAD,CAAkBC,KAAM,GAAIP,MAAO,CAACQ,MAAO,e,2SCa/ClD,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCiD,KAAM,CACJC,QAAS,OACTT,SAAU,WACVG,aAAc,QAGhBO,KAAM,CACJC,QAAS,OACT,uBAAwB,CACtBC,aAAa,aAAD,OAAerD,EAAMsD,QAAQC,KAAK,MAC9CC,cAAe,OACfC,aAAc,QAEhB,UAAW,CACTC,OAAQ,YAGZC,KAAM,CACJC,KAAM,aACN1D,WAAY,UAEd2D,QAAS,CACPD,KAAM,EACNZ,MAAOhD,EAAMsD,QAAQC,KAAK,KAC1BO,SAAU,SACV3D,SAAU,UAEZ4D,WAAY,CACVC,WAAYhE,EAAMiE,WAAWC,mBAC7BlB,MAAOhD,EAAMsD,QAAQC,KAAK,KAC1BY,cAAe,YACfL,SAAU,QAEZM,QAAS,CACPC,WAAY,SACZC,aAAc,WACdnE,SAAU,UAEZoE,cAAe,CACb3B,aAAc,OACdM,QAAS,OACTO,aAAc,SACde,UAAW,OACXR,WAAYhE,EAAMiE,WAAWC,wBAI3BO,EAAqB,WACzB,IAAMvD,EAAUpB,IACV4E,EAAUC,cACRC,EAASC,cAATD,KACR,EAAwEE,cAAhEC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,WAAYC,EAA/B,EAA+BA,yBAA0BC,EAAzD,EAAyDA,WACjDC,EAAmBC,cAAnBD,eAGR,EAAsDE,oBAAS,GAA/D,mBAAOC,EAAP,KAA4BC,EAA5B,KACA,EAA0CF,oBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAEA,EAAsCJ,oBAAS,GAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAWAnE,qBAAU,WACJoD,EAAKgB,OACPZ,EAAWJ,EAAKgB,SAGjB,CAAChB,IAEJpD,qBAAU,YACY,IAAhBkE,GAAwBd,EAAKgB,OAC/BZ,EAAWJ,EAAKgB,SAGjB,CAACF,IAEJ,IAYMG,EAAiB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACxBN,GAAiB,GAEXO,EAASf,EAAyBa,EAAMlB,GAHtB,SAKlBqB,YAAsBD,GAAQE,KAA9B,+BAAAH,EAAA,MAAmC,WAAMI,GAAN,eAAAJ,EAAA,sDACjCK,EADiC,2BACLJ,GADK,IACGK,2BAA4BF,EAAIE,6BAC1EnB,EAAWkB,GAAsB,kBAAMb,GAAuB,MAC9DJ,EAAegB,EAAIG,SAHoB,2CAAnC,uDAIHC,OAAM,SAACC,GACRrB,EAAe,2DAEde,MAAK,kBAAMT,GAAiB,MAZP,2CAAH,sDAcvB,OAAID,EAAsB,cAAC,IAAD,IACnB,cAAC7E,EAAA,EAAD,CACLC,UAAW,SACXE,OACE,cAAC2F,EAAA,EAAD,CACEC,SAAU,cAACC,EAAA,EAAD,IACVC,WAAY,cAACC,EAAA,EAAD,oCAGhB9F,KACE,qCACE,cAAC,gBAAD,CAGE+F,kBAAmB,EACnBC,UAjEU,WAChB,OAAO,IAAIC,SAAQ,SAACC,GAClBtB,GAAe,GACf5D,YAAW,WACT4D,GAAe,GACfsB,MACC,SA4DCC,cAAe,IACfC,gBAAgB,EANlB,SAOE,qCAEyB,IAArBpC,EAAUqC,QACV,cAACC,EAAA,EAAD,CAAMzG,UAAWM,EAAQ+B,KAAzB,SAEI8B,EAAUuC,KAAI,SAACnE,GAAD,OAAU,sBAAmBvC,UAAWM,EAAQiC,KAAMoE,SAjDtElF,EAiDoFc,EAAKd,GAjDlF,WACnBqC,EAAQ8C,KAAK,CAAEC,SAAUC,IAAOC,YAAYC,QAAQ,MAAOvF,OAgDrB,UACtB,cAAC,IAAD,CAAiBW,MAAM,UAAUpC,UAAWM,EAAQyC,OACpD,sBAAK/C,UAAWM,EAAQ2C,QAAxB,UACE,qBAAKjD,UAAWM,EAAQ6C,WAAxB,SAAqCZ,EAAK0E,QAC1C,qBAAKjH,UAAWM,EAAQkD,QAAxB,SAAkCjB,EAAKiB,UACtCjB,EAAK2E,UAAY,8BAAM3E,EAAK2E,gBALC3E,EAAKd,IAjD1C,IAACA,OA4DJ,cAAC0F,EAAA,EAAD,CAAQnH,UAAWM,EAAQqD,cAAeyD,QAAQ,YAAYhF,MAAM,UAAUuE,QAxDlE,WACpBhC,GAAuB,IAuDuF0C,WAAS,EAA/G,mCAGCvC,EACC,cAAC,IAAD,IACE,UAINJ,GAEA,cAAC4C,EAAA,EAAD,CACEL,MAAO,kBACPM,oBAjEwB,WAChC5C,GAAuB,IAiEf6C,oBAAqBvC","file":"static/js/29.03d41348.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport clsx from 'clsx';\nimport \"./PageLayout.scss\"\nimport { usePageContext } from \"@Context/PageContext\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    paddingTop: '4.3rem',\n    overflow:'auto',\n    backgroundColor: 'white',\n    height: '100%',\n    // \"&::after\":{\n    //   content: '\" \"',\n    //   display: 'block',\n    //   height: 'calc(1.25rem + 56px + 28px)',\n    //   width: '100%'\n    // }\n  },\n  rootHome: {\n    paddingTop: '4.3rem',\n    paddingRight: '0',\n    paddingLeft: '0',\n    overflow:'auto',\n    backgroundColor: 'white',\n    height: '100%',\n  },\n  bottomNavigatorSpacer: {\n    // Bottom navigation padding-bottom + Bottom navigation height + fab half height (56px / 2)\n    height: 'calc(1.25rem + 56px + 28px)'\n  },\n  container: {\n    height: '100%',\n  }\n}));\n\nconst PageLayout = ({ className, containerFullHeigth, header, body, footer, PageName }) => {\n  const classes = useStyles();\n  const { saveScrollPosition, getScrollPosition } = usePageContext();\n  const containerRef = useRef(null);\n\n  // if(containerRef.current){\n  //   console.log(containerRef.current);\n  //   console.log('containerRef available, scrollHeight',containerRef.current.scrollHeight)\n  // }else{\n  //   console.log('containerRef not available')\n  // }\n  useEffect(()=>{\n    if(PageName){\n      const savedPos = getScrollPosition(PageName);\n      // const { scrollTop, scrollHeight } = containerRef.current;\n      // console.log('scrollTop, scrollHeight before scrolling:',scrollTop,scrollHeight);\n      // console.log('scroll to',savedPos)\n      containerRef.current.scrollTo(0, savedPos);\n  \n      const listenToScroll = (e) => {\n        const { scrollTop } = containerRef.current;\n        // console.log('when scrolling scrollHeight',containerRef.current.scrollHeight)\n        // console.log(containerRef.current);\n        saveScrollPosition(scrollTop, PageName);\n      }\n      setTimeout(() => {\n        // console.log('add onscroll listener')\n        if(containerRef.current)\n        containerRef.current.addEventListener('scroll', listenToScroll);\n      }, 1);\n      const node = containerRef.current;\n      return () => {\n        node.removeEventListener('scroll', listenToScroll)\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[])\n\n  return <Container className={PageName === \"home\" ? clsx(classes.rootHome, [className]) : clsx(classes.root, [className])} ref={containerRef} id='page-layout-container'>\n    {header}\n    <div className={clsx({[classes.container]:containerFullHeigth})}>\n      {body}\n    </div>\n    <div className={classes.footer}>\n    {\n      !!footer && <>\n        <div className={classes.bottomNavigatorSpacer} />\n        <div/>\n        {footer}\n      </>\n    }\n    </div>\n  </Container>;\n}\n\nexport { PageLayout };\n","export * from './Header';\n","export * from './BackButton';\n","import React from 'react';\nimport { CircularProgress } from '@material-ui/core';\n\n\nconst CustomRefreshContent = ({topCoordinate=\"3%\"}) => {\n    return (\n      <div style={{position: \"absolute\", left: \"50%\", top: topCoordinate, backgroundColor: \"white\", borderRadius: \"50%\", width: \"35px\", height: \"35px\"}} >\n          <CircularProgress size={30} style={{color: \"black\"}}/>\n      </div>\n    )\n}\n\nexport { CustomRefreshContent };","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Header } from \"@Common/Header\";\nimport Card from '@material-ui/core/Card';\nimport { PageLayout } from \"@Common/PageLayout/PageLayout\";\nimport { PageHeader } from '@Common/PageHeader/PageHeader';\nimport { BackButton } from '@Common/BackButton';\nimport HomeRoundedIcon from '@material-ui/icons/HomeRounded';\nimport Button from '@material-ui/core/Button';\nimport { useHistory } from 'react-router-dom';\nimport { routes } from 'src/constants/routes.constant';\nimport { useAddressContext } from '@Context/AddressContext';\nimport { useUserContext } from '@Context/UserContext';\nimport OverlayAddressSelector from '@View/OverlayAddressSelector';\nimport { addUserFavAddressList } from '@API/api';\nimport { PullToRefresh } from \"react-js-pull-to-refresh\";\nimport { CustomRefreshContent } from '@Common/RefreshContent'\nimport { useAlertContext } from '@Context/AlertContext';\nimport { OverlayLoader } from \"@Common/Loader\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    padding: '1rem',\n    position: 'relative',\n    borderRadius: '1rem',\n    // marginBottom: '2rem'\n  },\n  item: {\n    display: \"flex\",\n    \"&:not(:last-of-type)\": {\n      borderBottom: `1px solid ${theme.palette.grey[300]}`,\n      paddingBottom: '1rem',\n      marginBottom: '1rem',\n    },\n    \"&:hover\": {\n      cursor: \"pointer\"\n    }\n  },\n  icon: {\n    flex: \"0 0 2.5rem\",\n    paddingTop: '0.5rem'\n  },\n  details: {\n    flex: 1,\n    color: theme.palette.grey[600],\n    fontSize: '0.8rem',\n    overflow: 'hidden'\n  },\n  itemHeader: {\n    fontWeight: theme.typography.platformFontWeight,\n    color: theme.palette.grey[800],\n    textTransform: \"uppercase\",\n    fontSize: '1rem'\n  },\n  address: {\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n    overflow: 'hidden'\n  },\n  addAddressBtn: {\n    borderRadius: '2rem',\n    padding: '1rem',\n    marginBottom: '1.5rem',\n    marginTop: '2rem',\n    fontWeight: theme.typography.platformFontWeight,\n  },\n}));\n\nconst FavouriteAddresses = () => {\n  const classes = useStyles();\n  const history = useHistory();\n  const { user } = useUserContext();\n  const { addresses, getFavAddr, generateValuesForAddAddr, addAddress } = useAddressContext();\n  const { pushAlertPopUp } = useAlertContext();\n  // const geocoderRef = useRef(null);\n\n  const [showAddAddressModal, setShowAddAddressModal] = useState(false);\n  const [addingAddress, setAddingAddress] = useState(false);\n\n  const [refreshData, setRefreshData] = useState(false)\n  const onRefresh = () => {\n    return new Promise((resolve) => {\n      setRefreshData(true)\n      setTimeout(() => {\n        setRefreshData(false)\n        resolve();\n      }, 3000)\n    });\n  }\n  // call to get users' addresses if they got any in FM app\n  useEffect(() => {\n    if (user.token) {\n      getFavAddr(user.token);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user])\n\n  useEffect(() => {\n    if (refreshData === true && user.token) {\n      getFavAddr(user.token);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [refreshData])\n\n  const edit = (id) => () => {\n    history.push({ pathname: routes.editAddress.replace(':id', id) });\n  }\n\n  const onAddBtnClick = () => {\n    setShowAddAddressModal(true);\n  }\n\n  const onSelectAddressViewClosed = () => {\n    setShowAddAddressModal(false);\n  }\n\n  const onNewAddressAdded = async (addr) => {\n    setAddingAddress(true);\n\n    const values = generateValuesForAddAddr(addr, user);\n    // console.log('and the place', addr.place);\n    await addUserFavAddressList(values).then(async res => {\n      const objWithIdFromBackend = { ...values, customerFavouriteAddressId: res.customerFavouriteAddressId };\n      addAddress(objWithIdFromBackend, () => setShowAddAddressModal(false));\n      pushAlertPopUp(res.message);\n    }).catch((err) => {\n      pushAlertPopUp(`Problem connecting to server. Please try again later`);\n    })\n      .then(() => setAddingAddress(false));\n  }\n  if (addingAddress) return <OverlayLoader />;\n  return <PageLayout\n    className={'greyBg'}\n    header={\n      <Header\n        leftSlot={<BackButton />}\n        centerSlot={<PageHeader>Favourite Addresses</PageHeader>}\n      />\n    }\n    body={\n      <>\n        <PullToRefresh\n          // pullDownContent={<PullDownContent />}\n          // releaseContent={<ReleaseContent />}\n          pullDownThreshold={0}\n          onRefresh={onRefresh}\n          triggerHeight={300}\n          startInvisible={true}>\n          <>\n            {\n              addresses.length !== 0 &&\n              <Card className={classes.card}>\n                {\n                  addresses.map((item) => <div key={item.id} className={classes.item} onClick={edit(item.id)}>\n                    <HomeRoundedIcon color=\"primary\" className={classes.icon} />\n                    <div className={classes.details}>\n                      <div className={classes.itemHeader}>{item.title}</div>\n                      <div className={classes.address}>{item.address}</div>\n                      {item.address2 && <div>{item.address2}</div>}\n                    </div>\n                  </div>)\n                }\n              </Card>\n            }\n            <Button className={classes.addAddressBtn} variant=\"contained\" color=\"primary\" onClick={onAddBtnClick} fullWidth>\n              Add Favourite Address\n            </Button>\n            {refreshData ? (\n              <CustomRefreshContent />\n            ) : null}\n          </>\n        </PullToRefresh>\n        {\n          showAddAddressModal\n          &&\n          <OverlayAddressSelector\n            title={\"ADD NEW ADDRESS\"}\n            onBackButtonClicked={onSelectAddressViewClosed}\n            onUseAddressClicked={onNewAddressAdded}\n          />\n        }\n      </>\n    }\n  />\n};\n\nexport { FavouriteAddresses };\n"],"sourceRoot":""}