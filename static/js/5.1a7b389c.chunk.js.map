{"version":3,"sources":["components/Common/Header/Header.jsx","assets/svgs/back-btn.svg","components/Common/BackButton/BackButton.jsx","hooks/useViewPortSize.js","components/Common/PageHeader/PageHeader.jsx","components/OverlayAddressSelector/OverlayAddressSelector.jsx","hooks/useOnClickOutside.js","components/Common/PageLayout/OverlayPageLayout.jsx","assets/svgs/BlueDotCirclePulsing.svg","assets/svgs/map-center-marker.svg","components/Common/Map/GoogleMap.jsx"],"names":["Header","leftSlot","centerSlot","rightSlot","id","className","color","position","elevation","disableGutters","BackButton","onBackClicked","goBack","useHistory","IconButton","edge","aria-label","onClick","src","BackButton_Icon","alt","useViewPortSize","useState","window","innerWidth","width","setWidth","innerHeight","height","setHeight","resizeTimeoutRef","useRef","getWindowInnerHeight","clearTimeout","current","setTimeout","vpWidth","vpHeight","useLayoutEffect","addEventListener","removeEventListener","useStyles","makeStyles","theme","bold","fontWeight","typography","platformFontWeight","PageHeader","children","classes","clsx","component","root","paddingTop","filterBar","props","step","opacity","padding","margin","boxSizing","display","alignItems","justifyContent","backgroundColor","lighten","palette","primary","light","border","transition","addressSearchInput","marginLeft","spacing","iconButton","textAlign","bottomSection","bottom","bottomSectionActionButton","borderRadius","fontSize","card","marginBottom","fieldInput","customGrey","dark","chips","chipLabel","flex","textTransform","minWidth","overflow","textOverflow","whiteSpace","labelAs","paddingBottom","selectedAddressField","lighter","marginTop","placeholder","editButton","predictionItems","zIndex","top","predictionItem","borderBottom","TypeLabels","OverlayAddressSelector","ref","handler","title","defaultAddress","address","address2","notes","place","undefined","onBackButtonClicked","onUseAddressClicked","propOnUseAddressClicked","addr","isEditingAddress","useTheme","searchAreaRef","geocodingTimeoutRef","triggerZoomChangedRef","askedUserConsent","setAskedUserConsent","useStoreContext","userEnabledLocation","setUserEnabledLocation","userLocation","setUserLocation","pushAlertPopUp","useAlertContext","mapHeight","defaultAddressAvailable","latitude","setStep","findIndex","l","toLowerCase","selectedChipLabel","setSelectedChipLabel","addressSearch","setAddressSearch","showPredictions","setShowPredictions","predictions","setPredictions","selectedPlace","setSelectedPlace","addressDetail","setAddressDetail","useEffect","listener","event","contains","target","document","handleChange","addrDtl","name","checked","value","getAddressByGeocodeLatLng","geocoder","lat","lng","latlng","geocode","location","then","response","results","catch","err","console","warn","assignAddress","formatted_address","curAddress","assignAddressPlace","mapEventRegistries","useMemo","startReverseGeocoding","map","mapCenterLat","center","mapCenterLng","startReverseGeocodingAndAssignPlace","getUserCurrentLocation","pos","formattedPos","parseFloat","OverlayPageLayout","header","body","Box","flexShrink","flexGrow","Paper","type","InputBase","inputProps","onChange","onFocus","autoComplete","length","List","prediction","i","ListItem","removeSelectedPrediction","description","place_id","GoogleMap","apiKey","config","googleMapKey","showCurrentUserLocation","initialCenterPosition","longitude","centerPosition","overridePlaceId","search","focusZoomLevel","onSearched","onMapEvents","drawCenterIcon","noCurrLocationMarker","Button","variant","style","disabled","s","Card","CardContent","Typography","size","TextField","label","fullWidth","InputLabelProps","shrink","Chip","index","cur","transform","maxWidth","paddingLeft","paddingRight","background","left","footer","mapHolder","boxShadow","content","MapCenterMarker","backgroundSize","pointerEvents","mapOverlay","controlArea","outline","fontFamily","querySection","queryInput","searchIconButton","resultList","borderBottomLeftRadius","borderBottomRightRadius","resultListItem","loadingIcon","markers","changeableMarkers","markerCoordinates","activeMarkerIndex","onMarkerClicked","onMarkerCoordinatesClicked","coordinate","markerInfoContent","markerIcon","storeIcon","updateActiveMarkerIndex","infoWindowRef","scriptHasLoaded","useAddressContext","queryTimeoutRef","currentLocationUpdateIntervalRef","mapRef","geocoderRef","currentPositionMarkerRef","markerRef","markersRef","autoCompleteServiceRef","placeServiceRef","hasMapLoaded","setHasMapLoaded","query","onDisplaySuggestionResult","status","google","maps","places","PlacesServiceStatus","OK","error","getPlacePredictions","input","componentRestrictions","country","setCenter","setZoom","googlemaps","setMarkers","Map","getElementById","disableDefaultUI","gestureHandling","zoom","clickableIcons","Geocoder","addListenerOnce","controls","ControlPosition","TOP_CENTER","push","initMap","AutocompleteService","PlacesService","onGetPositionSuccess","setPosition","markerImage","MarkerImage","BlueDotCirclePulsing","Point","marker","Marker","icon","getLocationByHTML","navigator","geolocation","getCurrentPosition","coords","getPositionOptions","updateCurrentUserLocationMarker","my","getLocation","success","res","fail","stores","infowindow","InfoWindow","infowindowContent","infoWindowWidth","clientWidth","setOptions","setContent","m","idx","coorMarker","storeName","addListener","open","anchorPoint","theMap","find","getTitle","setVisible","setClickable","resetMarkers","placeId","getDetails","geo","geometry","viewport","fitBounds","getCenter","currentPosition","getPlaceDetailAndMarkOnMap","setInterval","clearInterval","setMap","trigger","googleMapsEvent","e","listenerSwitch","removeListener","displayName"],"mappings":"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","file":"static/js/5.1a7b389c.chunk.js","sourcesContent":["import React from 'react';\n// Components\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Container from '@material-ui/core/Container';\nimport './Header.scss'\n\n\nconst Header = ({ leftSlot, centerSlot, rightSlot }) => {\n\n  return (\n    <AppBar id=\"appbar\" className='header-container' color=\"secondary\" position=\"fixed\" elevation={1}>\n      <Container>\n        <Toolbar className='header-toolbar' disableGutters>\n          <div className='header-left'>{leftSlot}</div>\n          <div className='header-center'>{centerSlot}</div>\n          <div className='header-right'>{rightSlot}</div>\n        </Toolbar>\n      </Container>\n    </AppBar>\n  );\n};\n\nexport { Header };\n","export default __webpack_public_path__ + \"static/media/back-btn.715fa344.svg\";","import React from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport IconButton from '@material-ui/core/IconButton';\nimport './BackButton.scss'\nimport BackButton_Icon from \"@Assets/svgs/back-btn.svg\"\n\nconst BackButton = ({ \n  className,\n  onBackClicked,\n}) => {\n  const history = useHistory();\n  const goBack = history.goBack;\n  \n  return <>\n    {/* pass props className= 'backButton-withoutHeader' for backbutton without header */}\n    <IconButton className={className? className: 'backButton'} edge=\"start\" color=\"inherit\" aria-label=\"back\" onClick={!!onBackClicked ? onBackClicked : goBack}>\n    <img src={BackButton_Icon} alt=\"pic\"/>\n    </IconButton>\n  </>;\n}\n\nexport { BackButton };\n","import { useLayoutEffect, useState, useRef } from \"react\";\n\nconst useViewPortSize = () => {\n\n  const [width, setWidth] = useState(window.innerWidth);\n  const [height, setHeight] = useState(window.innerHeight);\n  const resizeTimeoutRef = useRef();\n\n  const getWindowInnerHeight = () => {\n    clearTimeout(resizeTimeoutRef.current);\n    resizeTimeoutRef.current = setTimeout(() => {\n      const vpWidth = window.innerWidth;\n      const vpHeight = window.innerHeight;\n      setWidth(vpWidth);\n      setHeight(vpHeight);\n    }, 500);\n  }\n\n  useLayoutEffect(() => {\n    window.addEventListener(\"resize\", getWindowInnerHeight);\n\n    return () => {\n      window.removeEventListener(\"resize\", getWindowInnerHeight);\n    }\n  }, [])\n\n  return [width, height] \n}\n\nexport default useViewPortSize;\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport './PageHeader.scss'\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\n\nconst useStyles = makeStyles(theme => ({\n  bold:{\n    fontWeight: theme.typography.platformFontWeight,\n  },\n}));\n\nconst PageHeader = ({ children }) => {\n  const classes = useStyles();\n\n  return <Typography className={clsx('page_header-container', classes.bold)} component=\"h1\">\n    {children}\n  </Typography>;\n}\n\nexport { PageHeader };\n","import React, { useState } from \"react\";\nimport { OverlayPageLayout } from \"@Common/PageLayout/OverlayPageLayout\";\nimport { Header } from \"@Common/Header/Header\";\nimport { BackButton } from \"@Common/BackButton/BackButton\";\nimport { PageHeader } from \"@Common/PageHeader/PageHeader\";\nimport { GoogleMap } from \"@Common/Map/GoogleMap\";\nimport { makeStyles, Paper, Chip, Box, Card, CardContent, TextField, IconButton, lighten, InputBase, Button, Typography, List, ListItem } from \"@material-ui/core\";\nimport { config } from \"src/constants/config\";\nimport LocationSearchingIcon from '@material-ui/icons/LocationSearching';\nimport useViewPortSize from \"@Hook/useViewPortSize\";\nimport { useStoreContext } from \"@Context/StoreContext\";\nimport { useMemo } from \"react\";\nimport { useEffect } from \"react\";\nimport { getUserCurrentLocation } from \"@Util/map\";\nimport { useRef } from \"react\";\nimport { useOnClickOutside } from \"@Hook/useOnClickOutside\";\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { useTheme } from '@material-ui/styles';\nimport { useAlertContext } from '@Context/AlertContext';\nimport clsx from 'clsx';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: 'relative',\n    paddingTop: '1rem'\n  },\n  filterBar: {\n    height: (props) => props.step === 1 ? \"0px\" : \"44px\",\n    opacity: (props) => props.step === 1 ? 0 : 1,\n    padding: '0 4px',\n    margin: '0 auto',\n    boxSizing: \"border-box\",\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    width: \"96%\",\n    backgroundColor: `${lighten(theme.palette.primary.light, 0.75)}`,\n    border: 0,\n    transition: \"height 0.18s ease, opacity 0.15s ease\",\n  },\n  addressSearchInput: {\n    marginLeft: theme.spacing(1),\n    width: \"100%\",\n  },\n  iconButton: {\n    textAlign: \"right\",\n    padding: '10px 6px',\n  },\n  bottomSection: {\n    position: \"fixed\",\n    display: \"flex\",\n    bottom: 10,\n    marginLeft: -6, //offset overlay padding\n    width: \"100%\",\n    justifyContent: \"center\"\n  },\n  bottomSectionActionButton: {\n    padding: '1rem 1.5rem',\n    borderRadius: '2rem',\n    width: '100%',\n    fontWeight: theme.typography.platformFontWeight,\n    fontSize: \"0.8rem\"\n  },\n  card: {\n    width: '90%',\n    padding: 0,\n    position: 'relative',\n    borderRadius: '1rem',\n    marginBottom: '2rem'\n  },\n  fieldInput: {\n    color: theme.palette.customGrey.dark,\n    '&::placeholder': { /* Chrome, Firefox, Opera, Safari 10.1+ */\n      color: theme.palette.customGrey.dark,\n      opacity: 1 /* Firefox */\n    },\n    fontSize: \"0.8rem\"\n  },\n  chips: {\n    width: \"95%\",\n    margin: \"0 auto\",\n    justifyContent: \"space-between\"\n  },\n  chipLabel: {\n    flex: \"0 0 32%\",\n    textTransform: \"uppercase\",\n    minWidth: 0,\n    fontSize: \"0.8rem\",\n    \"& > span\": {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    }\n  },\n  labelAs: {\n    marginLeft: theme.spacing(1),\n    paddingBottom: \"0.5rem\",\n    fontWeight: theme.typography.platformFontWeight,\n    fontSize: \"0.8rem\"\n  },\n  selectedAddressField: {\n    display: 'flex',\n    borderRadius: '0.5rem',\n    backgroundColor: `${theme.palette.primary.lighter}`,\n    alignItems: 'center',\n    marginTop: '1rem',\n    padding: '0.75rem 0.75rem'\n  },\n  placeholder: {\n    flex: 1,\n    color: theme.palette.customGrey.dark\n  },\n  editButton: {\n    flex: '0 0 2rem',\n    display: 'inline-block',\n    textTransform: \"none\",\n    textAlign: \"right\"\n  },\n  predictionItems: {\n    position: \"absolute\",\n    display: \"block\",\n    width: \"100%\",\n    zIndex: 1,\n    top: \"60px\",\n    backgroundColor: \"white\",\n  },\n  predictionItem: {\n    \"&:not(:last-child)\": {\n      borderBottom: \"1px solid lightgrey\",\n    }\n  },\n  bold: {\n    fontWeight: theme.typography.platformFontWeight,\n  },\n}));\n\nconst outerMapHeight = 120;\n\nconst TypeLabels = [\"HOME\", \"WORK\", \"OTHER\"];\n\nconst OverlayAddressSelector = ({\n  title = \"Select Address\",\n  defaultAddress = {\n    address: \"\",\n    address2: \"\",\n    notes: \"\",\n    title: \"HOME\",\n    place: undefined,\n  },\n  onBackButtonClicked,\n  onUseAddressClicked: propOnUseAddressClicked = (addr) => { },\n  isEditingAddress = false,\n}) => {\n  const theme = useTheme();\n  const searchAreaRef = useRef(null);\n  const geocodingTimeoutRef = useRef(null);\n  const triggerZoomChangedRef = useRef(true);\n  const [askedUserConsent, setAskedUserConsent] = useState(false);\n  const { userEnabledLocation, setUserEnabledLocation, userLocation, setUserLocation } = useStoreContext();\n  const { pushAlertPopUp } = useAlertContext();\n\n  const [, vpHeight] = useViewPortSize();\n  const mapHeight = vpHeight - outerMapHeight;\n  const defaultAddressAvailable = !!defaultAddress.latitude;\n  const [step, setStep] = useState(0);\n  const [selectedChipLabel, setSelectedChipLabel] = useState(TypeLabels.findIndex(l => l.toLowerCase() === defaultAddress?.title?.toLowerCase()) || 0);\n  const [addressSearch, setAddressSearch] = useState(defaultAddressAvailable ? defaultAddress.address : \"\");\n  const [showPredictions, setShowPredictions] = useState(false);\n  const [predictions, setPredictions] = useState([]);      // this predictions contributed by Google API\n  const [selectedPlace, setSelectedPlace] = useState(undefined);\n  const [addressDetail, setAddressDetail] = useState(defaultAddress);\n  // const [selectedPrediction, setSelectedPrediction] = useState(null);\n\n  useOnClickOutside(searchAreaRef, () => setShowPredictions(false));\n\n  const classes = useStyles({\n    step,\n    mapHeight\n  });\n\n  const onNextClicked = () => {\n    setStep((s) => s + 1);\n  }\n\n  const onAddressSearchChange = (event) => {\n    setAddressSearch(event.target.value);\n  }\n\n  const handleChange = (event) => {\n    setAddressDetail((addrDtl) => ({ ...addrDtl, [event.target.name]: event.target.checked || event.target.value }));\n  };\n\n  const onChipLabelClicked = (index) => () => {\n    setSelectedChipLabel((cur) => cur !== index ? index : cur)\n    setAddressDetail((addrDtl) => ({ ...addrDtl, title: TypeLabels[index] }));\n  }\n\n  // Final decide which address to use for delivery\n  const onUseAddressClicked = () => {\n    // console.log(\"onUseAddressClicked: \", addressDetail)\n    propOnUseAddressClicked(addressDetail);\n  }\n\n  const onSearched = (predictions) => {\n    setPredictions(predictions);\n  }\n\n  const togglePredictionListVisible = (toggle) => () => {\n    setShowPredictions(true);\n  }\n\n  const onSelectPredictionListItem = (place) => (event, removeSelectedPrediction) => {\n    // console.log('in onSelectPredictionListItem, place',place);\n\n    setAddressSearch(place.description);\n    setAddressDetail((curAddress) => ({\n      ...curAddress,\n      address: place.description,\n      place\n    }));\n\n    setSelectedPlace(place);  // trigger placeServiceRef.current.getDetails\n    setShowPredictions(false);\n  }\n\n  // same method in FavouriteAddresses\n  const getAddressByGeocodeLatLng = (geocoder, lat, lng) => {\n    const latlng = { lat, lng };\n\n    return geocoder\n      .geocode({ location: latlng })\n      .then((response) => {\n        return response.results[0] || null;\n      })\n      .catch((err) => {\n        pushAlertPopUp(`Problem connecting to server. Please try again later`);\n        console.warn(\"Geocoder failed due to: \" + err);\n        return null;\n      });\n  }\n\n  // set addressDetails after get user location based on center of map\n  const assignAddress = (place) => {\n    // console.log('in assignAddress, place',place)\n    setAddressSearch(place.formatted_address);\n    setAddressDetail((curAddress) => ({\n      ...curAddress,\n      address: place.formatted_address,\n      place\n    }));\n    setSelectedPlace(null);\n  }\n  // set addressDetails.place after get user location based on center of map\n  const assignAddressPlace = (place) => {\n    // console.log('in assignAddressPlace, place',place)\n    setAddressDetail((curAddress) => ({\n      ...curAddress,\n      place\n    }));\n  }\n\n  // when user idle on map, set center as selected address\n  const mapEventRegistries = useMemo(() => {\n    const startReverseGeocoding = (map, geocoder) => {\n      const mapCenterLat = map.center.lat();\n      const mapCenterLng = map.center.lng();\n\n      clearTimeout(geocodingTimeoutRef.current);\n      geocodingTimeoutRef.current = setTimeout(() =>\n        getAddressByGeocodeLatLng(geocoder, mapCenterLat, mapCenterLng)\n          .then(assignAddress), 500);\n    }\n    const startReverseGeocodingAndAssignPlace = (map, geocoder) => {\n      const mapCenterLat = map.center.lat();\n      const mapCenterLng = map.center.lng();\n\n      clearTimeout(geocodingTimeoutRef.current);\n      geocodingTimeoutRef.current = setTimeout(() =>\n        getAddressByGeocodeLatLng(geocoder, mapCenterLat, mapCenterLng)\n          .then(assignAddressPlace), 500);\n    }\n    return [\n      ['idle', (map, geocoder) => {\n        // if(!isEditingAddress){\n        // console.log('idle');\n        startReverseGeocoding(map, geocoder);\n        // }\n      }, \"once\"],\n      ['dragend', (map, geocoder) => {\n        // console.log('dragend');\n        startReverseGeocoding(map, geocoder);\n      }],\n      // ['zoom_changed', (map, geocoder) => {\n      ['zoom_changed ', (map, geocoder) => {\n        // console.log('zoom_changed');\n        // console.log('bounds_changed ');\n        // console.log('triggerZoomChangedRef.current',triggerZoomChangedRef.current);\n        if (triggerZoomChangedRef.current) {\n          startReverseGeocoding(map, geocoder);\n        } else {\n          startReverseGeocodingAndAssignPlace(map, geocoder);\n          triggerZoomChangedRef.current = true;\n        }\n      }],\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    ]\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // set user location when user position changed\n  useEffect(() => {\n    if (!!addressDetail.place) {\n      setAskedUserConsent(true);\n      return;\n    }\n\n    getUserCurrentLocation((pos) => {\n      const formattedPos = { lat: parseFloat(pos.lat), lng: parseFloat(pos.lng) };\n      setUserLocation(formattedPos);\n      setAskedUserConsent(true);\n      setUserEnabledLocation(true);\n      // onFailedGettingUserLocation and onNotAgreedSharing\n      // if user didnt agree, let the app know we have asked them \n    }, () => setAskedUserConsent(true), () => setAskedUserConsent(true), pushAlertPopUp);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [addressDetail.place])\n\n  // console.log('selectedPlace on render',selectedPlace)\n  // console.log('addressDetail on render',addressDetail)\n\n  return (\n    <OverlayPageLayout\n      header={\n        <Header\n          leftSlot={<BackButton onBackClicked={onBackButtonClicked} />}\n          centerSlot={<PageHeader>{title}</PageHeader>}\n        />\n      }\n      body={\n        !askedUserConsent\n          ?\n          <div></div>\n          :\n          <div className={classes.root}>\n            <div ref={searchAreaRef}>\n              <Box flexShrink={0} flexGrow={1}>\n                <Paper elevation={0} component=\"div\" className={classes.filterBar}>\n                  <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\n                    <LocationSearchingIcon color={userEnabledLocation ? \"primary\" : undefined} />\n                  </IconButton>\n                  <InputBase\n                    className={classes.addressSearchInput}\n                    placeholder=\"e.g. Name, Location\"\n                    name=\"address\"\n                    inputProps={{ 'aria-label': 'search store' }}\n                    onChange={onAddressSearchChange}\n                    value={addressSearch}\n                    onFocus={togglePredictionListVisible(true)}\n                    autoComplete={\"off\"}\n                  />\n                  <IconButton onClick={() => { setAddressSearch('') }} className={classes.iconButton} aria-label=\"search\">\n                    {addressSearch.length > 0 ?\n                      <ClearIcon color=\"primary\" />\n                      : null}\n                  </IconButton>\n                </Paper>\n              </Box>\n              {\n                showPredictions && predictions.length > 0\n                &&\n                <List className={classes.predictionItems}>\n                  {\n                    predictions.map((prediction, i) => (\n                      <ListItem\n                        className={classes.predictionItem}\n                        key={prediction.place_id}\n                        onClick={onSelectPredictionListItem(prediction)}\n                      >\n                        {prediction.description}\n                      </ListItem>\n                    ))\n                  }\n                </List>\n              }\n            </div>\n            <GoogleMap\n              height={step === 0 ? mapHeight : mapHeight / 2}\n              apiKey={config.googleMapKey}\n              showCurrentUserLocation\n              // if no default address, use userLocation\n              initialCenterPosition={defaultAddressAvailable ? { lat: parseFloat(defaultAddress.latitude), lng: parseFloat(defaultAddress.longitude) } : userLocation}\n              centerPosition={userLocation}\n              overridePlaceId={selectedPlace?.place_id || defaultAddress.place?.place_id}\n              search={addressSearch}\n              focusZoomLevel={18}\n              onSearched={onSearched}\n              onMapEvents={mapEventRegistries}\n              drawCenterIcon\n              triggerZoomChangedRef={triggerZoomChangedRef}\n              noCurrLocationMarker={true}\n              isEditingAddress={isEditingAddress}\n              addressDetail={addressDetail}\n              setAddressDetail={setAddressDetail}\n            />\n            <div className={classes.bottomSection}>\n              {\n                step === 0\n                  ?\n                  <Button\n                    className={classes.bottomSectionActionButton}\n                    variant=\"contained\" color=\"primary\"\n                    style={{ width: \"70%\", marginBottom: 50 }}\n                    disabled={!addressDetail.address}\n                    onClick={onNextClicked}\n                  >\n                    NEXT\n                  </Button>\n                  :\n                  <Card className={classes.card}>\n                    <CardContent>\n                      <div className={classes.selectedAddressField}>\n                        <Typography variant=\"body2\" className={classes.placeholder}>\n                          {addressDetail.address}\n                        </Typography>\n                        <Button className={classes.editButton} color=\"primary\" size=\"small\" onClick={() => setStep(0)}>Edit</Button>\n                      </div>\n                      <TextField\n                        label=\"Floor/Unit\"\n                        style={{ margin: 8 }}\n                        fullWidth\n                        name=\"address2\"\n                        onChange={handleChange}\n                        placeholder={\"Floor/Unit\"}\n                        margin=\"normal\"\n                        autoComplete=\"off\"\n                        InputLabelProps={{\n                          shrink: true,\n                          classes: {\n                            root: classes.bold,\n                          }\n                        }}\n                        inputProps={{ 'aria-label': 'enter floor/unit', className: clsx(classes.fieldInput) }}\n                        value={addressDetail.address2}\n                      />\n                      <TextField\n                        label=\"Note to rider\"\n                        style={{ margin: 8 }}\n                        fullWidth\n                        name=\"notes\"\n                        onChange={handleChange}\n                        placeholder={\"e.g. landmark/building\"}\n                        margin=\"normal\"\n                        InputLabelProps={{\n                          shrink: true,\n                          classes: {\n                            root: classes.bold,\n                          }\n                        }}\n                        autoComplete=\"off\"\n                        inputProps={{ 'aria-label': 'enter note to rider', className: clsx(classes.fieldInput) }}\n                        value={addressDetail.notes}\n                      />\n                      <Typography className={clsx(classes.labelAs, classes.bold)} color=\"textSecondary\">Label as</Typography>\n                      <Box className={classes.chips} display=\"flex\" justifyContent=\"space-between\">\n                        {\n                          TypeLabels.map((type, i) => (\n                            <Chip\n                              className={classes.chipLabel}\n                              component=\"button\"\n                              label={type}\n                              variant={\"outlined\"}\n                              onClick={onChipLabelClicked(i)}\n                              color={selectedChipLabel === i ? \"primary\" : \"default\"}\n                              style={{ color: `${selectedChipLabel === i ? \"primary\" : theme.palette.customGrey.light}` }}\n                            />\n                          ))\n                        }\n                      </Box>\n                      <br />\n                      <Button\n                        className={classes.bottomSectionActionButton}\n                        variant=\"contained\" color=\"primary\" style={{ width: \"90%\", transform: \"translateX(5%)\" }}\n                        onClick={onUseAddressClicked}>USE THIS ADDRESS</Button>\n                    </CardContent>\n                  </Card>\n              }\n            </div>\n          </div>\n      }\n    />\n  )\n}\n\nexport { OverlayAddressSelector }","import { useEffect } from \"react\";\n\n// Hook\nexport function useOnClickOutside(ref, handler) {\n  useEffect(\n    () => {\n      const listener = (event) => {\n        // Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          return;\n        }\n        handler(event);\n      };\n      document.addEventListener(\"mousedown\", listener);\n      document.addEventListener(\"touchstart\", listener);\n      return () => {\n        document.removeEventListener(\"mousedown\", listener);\n        document.removeEventListener(\"touchstart\", listener);\n      };\n    },\n    // Add ref and handler to effect dependencies\n    // It's worth noting that because passed in handler is a new ...\n    // ... function on every render that will cause this effect ...\n    // ... callback/cleanup to run every render. It's not a big deal ...\n    // ... but to optimize you can wrap handler in useCallback before ...\n    // ... passing it into this hook.\n    [ref, handler]\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    paddingTop: '4rem',\n    maxWidth: 'unset',\n    paddingLeft: 6,\n    paddingRight: 6,\n    position: 'fixed',\n    background: 'white',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    zIndex: 2000\n  },\n}));\n\nconst OverlayPageLayout = ({ header, body, footer }) => {\n  const classes = useStyles();\n  return <Container className={classes.root}>\n    {header}\n    <div>\n      {body}\n    </div>\n  </Container>;\n}\n\nexport { OverlayPageLayout };\n","export default __webpack_public_path__ + \"static/media/BlueDotCirclePulsing.adddd586.svg\";","export default __webpack_public_path__ + \"static/media/map-center-marker.f7143404.svg\";","import React, { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core\";\n// import useScript from \"@Hook/useScript\";\nimport BlueDotCirclePulsing from \"src/assets/svgs/BlueDotCirclePulsing.svg\";\nimport MapCenterMarker from \"src/assets/svgs/map-center-marker.svg\";\nimport { useAddressContext } from \"@Context/AddressContext\";\nimport { useAlertContext } from '@Context/AlertContext';\nimport { useStoreContext } from \"@Context/StoreContext\";\nimport { getPositionOptions } from '@Util/map';\n\nconst useStyles = makeStyles(() => ({\n  mapHolder: {\n    padding: \"6px\",\n  },\n  map: {\n    position: \"relative\",\n    height: (props) => `calc(${props.height+43}px - 1rem)`,\n    width: \"100%\",\n    borderRadius: \"12px\",\n    boxShadow: \"0 0 4px 1px rgba(22, 22, 22, 0.1)\",\n    transition: \"height 0.25s ease\",\n    \"& .gmnoprint\": {\n      display: \"none\",\n    },\n    \"&::after\": {\n      width: 22,\n      height: 40,\n      display: (props) => (props.drawCenterIcon ? \"block\" : \"none\"),\n      content: '\" \"',\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      margin: \"-40px 0 0 -11px\",\n      background: `url('${MapCenterMarker}')`,\n      backgroundSize: \"22px 40px\",\n      pointerEvents: \"none\",\n    },\n  },\n  mapOverlay: {\n    position: \"fixed\",\n  },\n  controlArea: {\n    width: \"90%\",\n    marginTop: \"14px\",\n    borderRadius: \"12px\",\n    boxSizing: \"border-box\",\n    outline: \"none\",\n    boxShadow: \"0 0 12px 4px rgba(22, 22, 22, 0.2)\",\n    backgroundColor: \"#eee\",\n    fontFamily: \"Roboto\",\n  },\n  querySection: {\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"100%\",\n  },\n  queryInput: {\n    flex: 1,\n    paddingRight: 12,\n  },\n  searchIconButton: {\n    padding: 10,\n  },\n  resultList: {\n    backgroundColor: \"#eee\",\n    borderBottomLeftRadius: 12,\n    borderBottomRightRadius: 12,\n  },\n  resultListItem: {\n    borderBottom: \"1px solid lightgrey\",\n    \"&:last-child\": {\n      borderBottom: 0,\n    },\n  },\n  loadingIcon: {\n    width: \"24px !important\",\n    height: \"24px !important\",\n  },\n  // centerMarker: {\n  //   position: \"absolute\",\n  //   /*url of the marker*/\n  //   background: \"url(http://maps.gstatic.com/mapfiles/markers2/marker.png) no-repeat\",\n  //   /*center the marker*/\n  //   // backgroundOrigin: \"center\",\n  //   // top:\"50%\",\n  //   // left:\"50%\",\n  //   // zIndex: 0,\n  //   // /*fix offset when needed*/\n  //   // marginLeft: -10,\n  //   // marginTop: 0,\n  //   // /*size of the image*/\n  //   // height: 34,\n  //   // width: 20,\n  //   // cursor: \"pointer\"\n  //   top: 0,\n  //   bottom: 0,\n  //   left: 0,\n  //   right: 0,\n  //   margin: \"auto\",\n  // }\n}));\n\nconst GoogleMap = ({\n  apiKey,\n  height,\n  overridePlaceId,\n  search = undefined,\n  initialCenterPosition = undefined,\n  centerPosition = undefined,\n  focusZoomLevel = 12,\n  markers = [], // aka stores\n  changeableMarkers: markerCoordinates = [],\n  activeMarkerIndex = undefined,\n  onMarkerClicked: onMarkerCoordinatesClicked = (coordinate) => {},\n  markerInfoContent = null,\n  markerIcon = null,\n  showCurrentUserLocation = false,\n  storeIcon = undefined,\n  drawCenterIcon = false,\n  onMapEvents = [], //e.g. [['dragend', callback]]\n  onSearched = (prediction) => {},\n  updateActiveMarkerIndex = null,\n  triggerZoomChangedRef,\n  infoWindowRef,\n  noCurrLocationMarker = false,\n  isEditingAddress = false,\n  addressDetail = {},\n  setAddressDetail = () => {},\n}) => {\n  // console.log('Google Map render');\n  const { scriptHasLoaded } = useAddressContext();\n  const { pushAlertPopUp } = useAlertContext();\n  const { userEnabledLocation } = useStoreContext();\n\n  const classes = useStyles({\n    height,\n    drawCenterIcon,\n  });\n\n  const queryTimeoutRef = useRef(null);\n  const currentLocationUpdateIntervalRef = useRef(null);\n  const mapRef = useRef(null);\n  const geocoderRef = useRef(null);\n  const currentPositionMarkerRef = useRef(null);\n  const markerRef = useRef(null);\n  const markersRef = useRef([]);\n  // const centerMarkerRef = useRef(null);\n  const autoCompleteServiceRef = useRef(null);\n  const placeServiceRef = useRef(null);\n\n  const [hasMapLoaded, setHasMapLoaded] = useState(false);\n  // const [hasInitMap, setHasInitMap] = useState(false);\n\n  // call Google API to get predictions\n  useEffect(() => {\n    const onDisplaySuggestionResult = (predictions, status) => {\n      // console.log('onDisplaySuggestionResult')\n      try {\n        if (\n          status !== window.google.maps.places.PlacesServiceStatus.OK ||\n          !predictions\n        ) {\n          console.error(status);\n          return;\n        }\n\n        onSearched(predictions);\n      } catch (err) {\n        console.warn(err);\n      }\n    };\n\n    const getPredictionByQueryInput = (query) => {\n      // console.log('query in getPredictionByQueryInput',query);\n      if (queryTimeoutRef && queryTimeoutRef.current) {\n        clearTimeout(queryTimeoutRef.current);\n      }\n\n      queryTimeoutRef.current = setTimeout(() => {\n        autoCompleteServiceRef.current.getPlacePredictions(\n          {\n            input: query,\n            componentRestrictions: { country: \"my\" },\n          },\n          onDisplaySuggestionResult\n        );\n      }, 1000);\n    };\n    if (!!search && search.length > 0) getPredictionByQueryInput(search);\n    // console.log('search',search);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [search]); // if onSearched is one of the dependencies of useEffect, the map will render infinitely\n\n  // set map's center and zoom level when center position or zoom level changed\n  useEffect(() => {\n    // console.log(`set map's center and zoom level when center position or zoom level changed`)\n    if (!centerPosition || !hasMapLoaded) return;\n    \n    mapRef.current?.setCenter(centerPosition);\n    mapRef.current?.setZoom(focusZoomLevel);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [centerPosition, focusZoomLevel]);\n\n  // set the current location of user when first load\n  // if user editing address, dont set\n  useEffect(() => {\n    // console.log('if user editing address, dont set. centerPosition',centerPosition, 'isEditingAddress', isEditingAddress)\n    if (!centerPosition || !hasMapLoaded) return;\n    if(isEditingAddress) return;\n    // console.log('setting center for map. mapRef.current',mapRef.current)\n    mapRef.current?.setCenter(centerPosition);\n    mapRef.current?.setZoom(focusZoomLevel);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hasMapLoaded, centerPosition, focusZoomLevel]);\n\n  useEffect(() => {\n    const initMap = () => {\n      /* Init Google Map */\n      if(!mapRef.current){\n        const googlemaps = window.google.maps;\n        const map = new googlemaps.Map(document.getElementById(\"map\"), {\n          // West Malaysia center by default\n          center: initialCenterPosition || { lat: 3.1390, lng: 101.6869 },\n          disableDefaultUI: true,\n          gestureHandling: \"greedy\",\n          zoom: initialCenterPosition ? focusZoomLevel : 18,\n          clickableIcons: false\n        });\n        mapRef.current = map;\n  \n        // Init Geocoder\n        const geocoder = new window.google.maps.Geocoder();\n        geocoderRef.current = geocoder;\n  \n        /* Google Map Events */\n        googlemaps.event.addListenerOnce(map, \"tilesloaded\", function () {\n          setHasMapLoaded(true);\n        });\n  \n        /* Embedding our component into google map view */\n        const card = document.getElementById(\"search-control\");\n        map.controls[googlemaps.ControlPosition.TOP_CENTER].push(card);\n  \n        setMarkers(map, googlemaps, markers);\n      }else{\n        // not first render but need this block of code to set markers\n        const map = mapRef.current; \n        const googlemaps = window.google.maps;\n        setMarkers(map, googlemaps, markers);\n      }\n    };\n\n    if (scriptHasLoaded) {\n      initMap();\n\n      // Init Services\n      autoCompleteServiceRef.current =\n        new window.google.maps.places.AutocompleteService();\n      placeServiceRef.current = new window.google.maps.places.PlacesService(\n        document.getElementById(\"placeAttrId\")\n      );\n    }else{\n      // console.log('script has not loaded');\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    // dont need, these values will not be changed or their changes do not need to trigger initialisation of map\n    scriptHasLoaded, markers\n  ]);\n\n  const onGetPositionSuccess = function (pos, map) {\n    if (!currentPositionMarkerRef.current) {\n      // console.log('first time enter here, currentPositionMarkerRef is null')\n      if(noCurrLocationMarker) return;\n      var markerImage = new window.google.maps.MarkerImage(\n        BlueDotCirclePulsing,\n        null,\n        // The origin for my image is 0,0.\n        new window.google.maps.Point(0, 0),\n        // The center of the image is 50,50 (my image is a circle with 100,100)\n        new window.google.maps.Point(30, 30)\n      );\n\n      var marker = new window.google.maps.Marker({\n        position: { lat: pos.lat, lng: pos.lng },\n        map: map,\n        title: \"Current Location\",\n        icon: markerImage,\n        zIndex: 999,\n      });\n\n      currentPositionMarkerRef.current = marker;\n    } else {\n      // console.log('currentPositionMarkerRef exists')\n      currentPositionMarkerRef.current.setPosition({\n        lat: pos.lat,\n        lng: pos.lng,\n      });\n    }\n\n    // map.setCenter(pos);\n  }\n\n  const getLocationByHTML = (map) => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        function (position) {\n          const pos = {\n            lat: +position.coords.latitude,\n            lng: +position.coords.longitude,\n          };\n          onGetPositionSuccess(pos, map);\n        },\n        function () {\n          pushAlertPopUp(\"Please enable GPS service\");\n        },\n        getPositionOptions\n      );\n    } else {\n      pushAlertPopUp(`Problem retrieving location. Please try again later`);\n    }\n  }\n\n  // this will be called consistently to update user's location\n  const updateCurrentUserLocationMarker = () => {\n    if (!window.google?.maps) return;\n\n    let map = mapRef.current;\n\n    // Check if this browser supports HTML5 geolocation\n    try{\n      // eslint-disable-next-line no-undef\n      my.getLocation({\n        success: (res) => {\n          const pos = {\n            lat: parseFloat(res.latitude),\n            lng: parseFloat(res.longitude)\n          };\n          onGetPositionSuccess(pos, map);\n        },\n        fail(res) {\n          switch (res.error) {\n            case \"11\":\n              pushAlertPopUp(`Problem retrieving location. Please try again later`);\n              break;\n            case \"12\":\n              pushAlertPopUp(`Problem connecting network, please try again`);\n              break;\n            case \"13\":\n              pushAlertPopUp(`Problem retrieving location. Please try again later`);\n              break;\n            case \"14\":\n              pushAlertPopUp(`Problem retrieving location. Please try again later`);\n              break;\n            default:\n              break;\n          }\n          getLocationByHTML(map);\n        },\n      });\n      return ;\n    }catch(err){\n      // console.log('tng SDK not available');\n      getLocationByHTML(map);\n    }\n  };\n\n  // used in InitMap\n  const setMarkers = (map, googlemaps, stores) => {\n    /* Make info window for current search location */\n    const infowindow = new googlemaps.InfoWindow();\n    const infowindowContent = document.getElementById(\"infowindow-content\");\n    let infoWindowWidth = document.getElementById(\"map\").clientWidth - 50;\n    if (infoWindowWidth > 600) infoWindowWidth = 600;\n\n    infowindow.setOptions({\n      minWidth: infoWindowWidth,\n    });\n    infowindow.setContent(infowindowContent);\n    if(infoWindowRef) infoWindowRef.current = infowindow;\n\n    // console.log('in set Markers, stores', stores);\n    stores.map((m, idx) => {\n      let coorMarker = new googlemaps.Marker({\n        position: {\n          lat: parseFloat(m.latitude),\n          lng: parseFloat(m.longitude),\n        },\n        map: map,\n        title: m.storeName,\n        icon: markerIcon,\n      });\n      window.google.maps.event.addListener(coorMarker, \"click\", function () {\n        // console.log('a marker clicked, whether trigger programmatically or by user gesture');\n        infowindow.open(map, coorMarker);\n        onMarkerCoordinatesClicked(m, idx);\n      });\n\n      markersRef.current.push(coorMarker);\n      return null;\n    });\n\n    const marker = new googlemaps.Marker({\n      map,\n      anchorPoint: new googlemaps.Point(0, -29),\n    });\n    markerRef.current = marker;\n  }\n  \n  // for filter in ViewMap\n  const resetMarkers = (theMap, googlemaps, stores) => {\n    const markers = markersRef.current;\n    // console.log('reset Markers!', theMap);\n\n    for (let i = 0; i < markers.length; i++) {\n      if(stores.find(s => s.storeName === markers[i].getTitle())){\n        markers[i].setVisible(true);\n        markers[i].setClickable(true);\n      }else{\n        markers[i].setVisible(false);\n        markers[i].setClickable(false);\n      }\n    }\n  }\n\n  // reset markers if marker coordinates changed\n  useEffect(()=>{\n    if(markerCoordinates.length !== 0 && scriptHasLoaded){\n      const map = mapRef.current; \n      const googlemaps = window.google.maps;\n      resetMarkers(map, googlemaps, markerCoordinates);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[markerCoordinates, scriptHasLoaded])\n\n  // only used in OverlayAddressSelector\n  // get placeId from autocomplete then use placeService to get details then mark it on map\n  useEffect(() => {\n    const getPlaceDetailAndMarkOnMap = (placeId) => {\n      // console.log('getPlaceDetailAndMarkOnMap')\n\n      const marker = markerRef.current;\n      marker.setVisible(false);\n\n      placeServiceRef.current.getDetails(\n        {\n          placeId,\n        },\n        (res, status) => {\n          if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n            // console.log('res of getDetails', res);\n            const geo = res.geometry,\n              map = mapRef.current;\n\n            if (!geo || !geo.location) {\n              pushAlertPopUp(`Problem retrieving location. Please try again later`);\n              return;\n            }\n\n            // If this place has a viewport definition, set it on map.\n            triggerZoomChangedRef.current = false;\n            if (geo.viewport) {\n              mapRef.current.fitBounds(geo.viewport);\n              map.setCenter(geo.viewport.getCenter());\n            } else {\n              // console.log('set center and set zoom');\n              map.setCenter(geo.location);\n              // map.setZoom(10);\n            }\n\n            marker.setPosition(geo.location);\n            marker.setVisible(!drawCenterIcon);\n            // else {\n            //   if (!!centerMarkerRef.current) {\n            //     centerMarkerRef.current.setPosition(geo.location);\n            //     centerMarkerRef.current.setVisible(true);\n            //   }\n            // }\n            // console.log('setSelectedPlace to response of PlacesService.getDetails')\n            const currentPosition = geo.location;\n            setAddressDetail({\n              ...addressDetail,\n              place: res,\n              latitude: currentPosition.lat(),\n              longitude: currentPosition.lng(),\n            });\n          } else {\n            pushAlertPopUp(\"Please enable GPS service\");\n          }\n        }\n      );\n    };\n    if (!hasMapLoaded || !overridePlaceId) return;\n    getPlaceDetailAndMarkOnMap(overridePlaceId);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [drawCenterIcon, hasMapLoaded, overridePlaceId]);\n\n  // update user location consistently if showCurrentUserLocation === true && user enabled location service\n  useEffect(() => {\n    if (!hasMapLoaded || !mapRef.current || !showCurrentUserLocation || !userEnabledLocation) return;\n\n    updateCurrentUserLocationMarker();\n    currentLocationUpdateIntervalRef.current = setInterval(\n      updateCurrentUserLocationMarker,\n      2000\n    );\n\n    return () => {\n      clearInterval(currentLocationUpdateIntervalRef.current);\n      currentPositionMarkerRef.current?.setMap(null);\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hasMapLoaded, showCurrentUserLocation, userEnabledLocation]);\n\n  // inform user if api key is null\n  useEffect(() => {\n    if (!apiKey) {\n      pushAlertPopUp(\"Google Service not available, please contact app developer\");\n    }\n  }, [apiKey, pushAlertPopUp]);\n\n  // let GMap click the marker when the active marker index changed\n  useEffect(() => {\n    if (!hasMapLoaded || activeMarkerIndex === undefined) return;\n    // console.log('active marker index changed to', activeMarkerIndex);\n    // console.log('active marker changed to', markersRef.current[activeMarkerIndex]);\n    window.google.maps.event.trigger(\n      markersRef.current[activeMarkerIndex],\n      \"click\"\n    );\n  }, [hasMapLoaded, activeMarkerIndex, updateActiveMarkerIndex]);\n\n  // Register custom events\n  useEffect(() => {\n    if (!hasMapLoaded || !geocoderRef.current) return;\n\n    const googleMapsEvent = window.google.maps.event;\n\n    onMapEvents.map((e) => {\n      const callOnce = !!e[2] && e[2] === \"once\";\n      let listenerSwitch = \"addListener\";\n\n      if (callOnce) listenerSwitch = \"addListenerOnce\";\n\n      googleMapsEvent[listenerSwitch](mapRef.current, e[0], () => {\n        e[1](mapRef.current, geocoderRef.current);\n      });\n      return null;\n    });\n\n    return () => {\n      /* Remove custom events */\n      onMapEvents.map((e) => {\n        googleMapsEvent.removeListener(mapRef.current, e[0], () => {\n          e[1](mapRef.current, geocoderRef.current);\n        });\n        return null;\n      });\n    };\n  }, [hasMapLoaded, onMapEvents]);\n\n  // useEffect(() => {\n  //   if (!hasMapLoaded)\n  //     return;\n\n  //   const map = mapRef.current;\n\n  //   if (drawCenterIcon) {\n  //     const centerMarker = new window.google.maps.Marker({\n  //       position: { lat: map.center.lat(), lng: map.center.lng() },\n  //       map,\n  //     });\n  //     centerMarker.setVisible(true);\n\n  //     centerMarkerRef.current = centerMarker;\n  //   }\n  // }, [mapRef.current, hasMapLoaded, drawCenterIcon])\n\n  return (\n    <div>\n      <div className={classes.mapHolder}>\n        <div className={classes.mapOverlay}>\n          <div id=\"infowindow-content\">{markerInfoContent}</div>\n        </div>\n        <div id=\"map\" className={classes.map} />\n        <div id=\"placeAttrId\" />\n      </div>\n    </div>\n  );\n};\n\nGoogleMap.displayName = \"Google Map Component\";\nGoogleMap.propTypes = {\n  apiKey: PropTypes.string.isRequired,\n};\n\nexport { GoogleMap };\n"],"sourceRoot":""}